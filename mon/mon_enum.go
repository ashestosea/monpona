// Code generated by go-enum DO NOT EDIT.
// Version: 0.6.0
// Revision: 919e61c0174b91303753ee3898569a01abb32c97
// Build Date: 2023-12-18T15:54:43Z
// Built By: goreleaser

package mon

import (
	"fmt"
	"strings"
)

const (
	// Egg is a Form of type Egg.
	Egg Form = iota
	// Baby is a Form of type Baby.
	Baby
	// Head is a Form of type Head.
	Head
	// Serpentine is a Form of type Serpentine.
	Serpentine
	// HeadArms is a Form of type HeadArms.
	HeadArms
	// HeadLegs is a Form of type HeadLegs.
	HeadLegs
	// Quadruped is a Form of type Quadruped.
	Quadruped
	// Multiped is a Form of type Multiped.
	Multiped
	// Insectoid is a Form of type Insectoid.
	Insectoid
	// Winged is a Form of type Winged.
	Winged
	// Aquatic is a Form of type Aquatic.
	Aquatic
	// Bipedal is a Form of type Bipedal.
	Bipedal
	// Multibody is a Form of type Multibody.
	Multibody
)

var ErrInvalidForm = fmt.Errorf("not a valid Form, try [%s]", strings.Join(_FormNames, ", "))

const _FormName = "EggBabyHeadSerpentineHeadArmsHeadLegsQuadrupedMultipedInsectoidWingedAquaticBipedalMultibody"

var _FormNames = []string{
	_FormName[0:3],
	_FormName[3:7],
	_FormName[7:11],
	_FormName[11:21],
	_FormName[21:29],
	_FormName[29:37],
	_FormName[37:46],
	_FormName[46:54],
	_FormName[54:63],
	_FormName[63:69],
	_FormName[69:76],
	_FormName[76:83],
	_FormName[83:92],
}

// FormNames returns a list of possible string values of Form.
func FormNames() []string {
	tmp := make([]string, len(_FormNames))
	copy(tmp, _FormNames)
	return tmp
}

// FormValues returns a list of the values for Form
func FormValues() []Form {
	return []Form{
		Egg,
		Baby,
		Head,
		Serpentine,
		HeadArms,
		HeadLegs,
		Quadruped,
		Multiped,
		Insectoid,
		Winged,
		Aquatic,
		Bipedal,
		Multibody,
	}
}

var _FormMap = map[Form]string{
	Egg:        _FormName[0:3],
	Baby:       _FormName[3:7],
	Head:       _FormName[7:11],
	Serpentine: _FormName[11:21],
	HeadArms:   _FormName[21:29],
	HeadLegs:   _FormName[29:37],
	Quadruped:  _FormName[37:46],
	Multiped:   _FormName[46:54],
	Insectoid:  _FormName[54:63],
	Winged:     _FormName[63:69],
	Aquatic:    _FormName[69:76],
	Bipedal:    _FormName[76:83],
	Multibody:  _FormName[83:92],
}

// String implements the Stringer interface.
func (x Form) String() string {
	if str, ok := _FormMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Form(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Form) IsValid() bool {
	_, ok := _FormMap[x]
	return ok
}

var _FormValue = map[string]Form{
	_FormName[0:3]:                    Egg,
	strings.ToLower(_FormName[0:3]):   Egg,
	_FormName[3:7]:                    Baby,
	strings.ToLower(_FormName[3:7]):   Baby,
	_FormName[7:11]:                   Head,
	strings.ToLower(_FormName[7:11]):  Head,
	_FormName[11:21]:                  Serpentine,
	strings.ToLower(_FormName[11:21]): Serpentine,
	_FormName[21:29]:                  HeadArms,
	strings.ToLower(_FormName[21:29]): HeadArms,
	_FormName[29:37]:                  HeadLegs,
	strings.ToLower(_FormName[29:37]): HeadLegs,
	_FormName[37:46]:                  Quadruped,
	strings.ToLower(_FormName[37:46]): Quadruped,
	_FormName[46:54]:                  Multiped,
	strings.ToLower(_FormName[46:54]): Multiped,
	_FormName[54:63]:                  Insectoid,
	strings.ToLower(_FormName[54:63]): Insectoid,
	_FormName[63:69]:                  Winged,
	strings.ToLower(_FormName[63:69]): Winged,
	_FormName[69:76]:                  Aquatic,
	strings.ToLower(_FormName[69:76]): Aquatic,
	_FormName[76:83]:                  Bipedal,
	strings.ToLower(_FormName[76:83]): Bipedal,
	_FormName[83:92]:                  Multibody,
	strings.ToLower(_FormName[83:92]): Multibody,
}

// ParseForm attempts to convert a string to a Form.
func ParseForm(name string) (Form, error) {
	if x, ok := _FormValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _FormValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return Form(0), fmt.Errorf("%s is %w", name, ErrInvalidForm)
}

// MarshalText implements the text marshaller method.
func (x Form) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Form) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseForm(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
