// Code generated by go-enum DO NOT EDIT.
// Version: 0.6.0
// Revision: 919e61c0174b91303753ee3898569a01abb32c97
// Build Date: 2023-12-18T15:54:43Z
// Built By: goreleaser

package main

import (
	"fmt"
	"strings"
)

const (
	// RainbowGrass is a Type of type RainbowGrass.
	RainbowGrass Food = iota
	// Ooznip is a Type of type Ooznip.
	Ooznip
	// Berry is a Type of type Berry.
	Berry
	// Groundnut is a Type of type Groundnut.
	Groundnut
	// Carnivorous is a Type of type Carnivorous.
	Carnivorous
)

var ErrInvalidType = fmt.Errorf("not a valid Type, try [%s]", strings.Join(_TypeNames, ", "))

const _TypeName = "RainbowGrassOoznipBerryGroundnutCarnivorous"

var _TypeNames = []string{
	_TypeName[0:12],
	_TypeName[12:18],
	_TypeName[18:23],
	_TypeName[23:32],
	_TypeName[32:43],
}

// TypeNames returns a list of possible string values of Type.
func TypeNames() []string {
	tmp := make([]string, len(_TypeNames))
	copy(tmp, _TypeNames)
	return tmp
}

// TypeValues returns a list of the values for Type
func TypeValues() []Food {
	return []Food{
		RainbowGrass,
		Ooznip,
		Berry,
		Groundnut,
		Carnivorous,
	}
}

var _TypeMap = map[Food]string{
	RainbowGrass: _TypeName[0:12],
	Ooznip:       _TypeName[12:18],
	Berry:        _TypeName[18:23],
	Groundnut:    _TypeName[23:32],
	Carnivorous:  _TypeName[32:43],
}

// String implements the Stringer interface.
func (x Food) String() string {
	if str, ok := _TypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Type(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Food) IsValid() bool {
	_, ok := _TypeMap[x]
	return ok
}

var _TypeValue = map[string]Food{
	_TypeName[0:12]:                   RainbowGrass,
	strings.ToLower(_TypeName[0:12]):  RainbowGrass,
	_TypeName[12:18]:                  Ooznip,
	strings.ToLower(_TypeName[12:18]): Ooznip,
	_TypeName[18:23]:                  Berry,
	strings.ToLower(_TypeName[18:23]): Berry,
	_TypeName[23:32]:                  Groundnut,
	strings.ToLower(_TypeName[23:32]): Groundnut,
	_TypeName[32:43]:                  Carnivorous,
	strings.ToLower(_TypeName[32:43]): Carnivorous,
}

// ParseType attempts to convert a string to a Type.
func ParseType(name string) (Food, error) {
	if x, ok := _TypeValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _TypeValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return Food(0), fmt.Errorf("%s is %w", name, ErrInvalidType)
}

// MarshalText implements the text marshaller method.
func (x Food) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Food) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
