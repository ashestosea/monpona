// Code generated by go-enum DO NOT EDIT.
// Version: 0.6.0
// Revision: 919e61c0174b91303753ee3898569a01abb32c97
// Build Date: 2023-12-18T15:54:43Z
// Built By: goreleaser

package main

import (
	"fmt"
	"strings"
)

const (
	// FormEgg is a Form of type Egg.
	FormEgg Form = iota
	// FormBaby is a Form of type Baby.
	FormBaby
	// FormHead is a Form of type Head.
	FormHead
	// FormSerpentine is a Form of type Serpentine.
	FormSerpentine
	// FormHeadArms is a Form of type HeadArms.
	FormHeadArms
	// FormHeadLegs is a Form of type HeadLegs.
	FormHeadLegs
	// FormQuadruped is a Form of type Quadruped.
	FormQuadruped
	// FormMultiped is a Form of type Multiped.
	FormMultiped
	// FormInsectoid is a Form of type Insectoid.
	FormInsectoid
	// FormWinged is a Form of type Winged.
	FormWinged
	// FormAquatic is a Form of type Aquatic.
	FormAquatic
	// FormBipedal is a Form of type Bipedal.
	FormBipedal
	// FormMultibody is a Form of type Multibody.
	FormMultibody
)

var ErrInvalidForm = fmt.Errorf("not a valid Form, try [%s]", strings.Join(_FormNames, ", "))

const _FormName = "EggBabyHeadSerpentineHeadArmsHeadLegsQuadrupedMultipedInsectoidWingedAquaticBipedalMultibody"

var _FormNames = []string{
	_FormName[0:3],
	_FormName[3:7],
	_FormName[7:11],
	_FormName[11:21],
	_FormName[21:29],
	_FormName[29:37],
	_FormName[37:46],
	_FormName[46:54],
	_FormName[54:63],
	_FormName[63:69],
	_FormName[69:76],
	_FormName[76:83],
	_FormName[83:92],
}

// FormNames returns a list of possible string values of Form.
func FormNames() []string {
	tmp := make([]string, len(_FormNames))
	copy(tmp, _FormNames)
	return tmp
}

// FormValues returns a list of the values for Form
func FormValues() []Form {
	return []Form{
		FormEgg,
		FormBaby,
		FormHead,
		FormSerpentine,
		FormHeadArms,
		FormHeadLegs,
		FormQuadruped,
		FormMultiped,
		FormInsectoid,
		FormWinged,
		FormAquatic,
		FormBipedal,
		FormMultibody,
	}
}

var _FormMap = map[Form]string{
	FormEgg:        _FormName[0:3],
	FormBaby:       _FormName[3:7],
	FormHead:       _FormName[7:11],
	FormSerpentine: _FormName[11:21],
	FormHeadArms:   _FormName[21:29],
	FormHeadLegs:   _FormName[29:37],
	FormQuadruped:  _FormName[37:46],
	FormMultiped:   _FormName[46:54],
	FormInsectoid:  _FormName[54:63],
	FormWinged:     _FormName[63:69],
	FormAquatic:    _FormName[69:76],
	FormBipedal:    _FormName[76:83],
	FormMultibody:  _FormName[83:92],
}

// String implements the Stringer interface.
func (x Form) String() string {
	if str, ok := _FormMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Form(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Form) IsValid() bool {
	_, ok := _FormMap[x]
	return ok
}

var _FormValue = map[string]Form{
	_FormName[0:3]:                    FormEgg,
	strings.ToLower(_FormName[0:3]):   FormEgg,
	_FormName[3:7]:                    FormBaby,
	strings.ToLower(_FormName[3:7]):   FormBaby,
	_FormName[7:11]:                   FormHead,
	strings.ToLower(_FormName[7:11]):  FormHead,
	_FormName[11:21]:                  FormSerpentine,
	strings.ToLower(_FormName[11:21]): FormSerpentine,
	_FormName[21:29]:                  FormHeadArms,
	strings.ToLower(_FormName[21:29]): FormHeadArms,
	_FormName[29:37]:                  FormHeadLegs,
	strings.ToLower(_FormName[29:37]): FormHeadLegs,
	_FormName[37:46]:                  FormQuadruped,
	strings.ToLower(_FormName[37:46]): FormQuadruped,
	_FormName[46:54]:                  FormMultiped,
	strings.ToLower(_FormName[46:54]): FormMultiped,
	_FormName[54:63]:                  FormInsectoid,
	strings.ToLower(_FormName[54:63]): FormInsectoid,
	_FormName[63:69]:                  FormWinged,
	strings.ToLower(_FormName[63:69]): FormWinged,
	_FormName[69:76]:                  FormAquatic,
	strings.ToLower(_FormName[69:76]): FormAquatic,
	_FormName[76:83]:                  FormBipedal,
	strings.ToLower(_FormName[76:83]): FormBipedal,
	_FormName[83:92]:                  FormMultibody,
	strings.ToLower(_FormName[83:92]): FormMultibody,
}

// ParseForm attempts to convert a string to a Form.
func ParseForm(name string) (Form, error) {
	if x, ok := _FormValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _FormValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return Form(0), fmt.Errorf("%s is %w", name, ErrInvalidForm)
}

// MarshalText implements the text marshaller method.
func (x Form) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Form) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseForm(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
